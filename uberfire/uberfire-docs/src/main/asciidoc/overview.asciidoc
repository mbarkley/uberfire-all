UberFire Overview
=================

This document is a survey of the features and capabilities of the
UberFire Rich Client Platform. If you are a software developer who's
new to UberFire and you're wondering what it's all about, then you've
come to the right place. If you're wondering whether UberFire is a fit
for your new (or existing) web application, this is also the right
place to start.

What is UberFire?
-----------------

UberFire is a rich client platform that helps you build web
applications. Both the client-side and server-side code are written in
Java; the server-side code is deployed as a Java EE `.war` file, and
the client-side code is deployed as precompiled JavaScript. No
Java-to-JavaScript translation occurs at runtime.

UberFire itself is built upon a general-purpose web framework called
Errai. Errai's design helps you maximize the amount of code shared
between the client and the server, leans toward a declarative (rather
than procedural) style, and strives to help you take advantage of the
type safety inherent to Java programs. Programs written in UberFire
can use Errai features directly.

Errai, in turn, is built on top of the Google Web Toolkit (GWT), which
provides a subset of the Java SE library, a large standard library of
user interface widgets, and most importantly, a highly optimized
Java-to-JavaScript compiler. There is also a huge collection of
third-party free and proprietary add-on libraries for GWT. UberFire
applications can take advantage of most of these.

UberFire makes it easy to include any or all of the following elements
in your application:

- User identity (login/logout) and authorization (access roles and permissions)
- A modular, user-configurable user interface (the user can rearrange designated portions of the UI by drag-and-drop)
  - The framework can remember an arbitrary number of such arrangements (each is called a Perspective)
    and the user can switch between them
  - The framework can limit visibility of UI elements (say, toolbar buttons and menu items)
    based on security authorization
- Nestable drop-down menus
- Tool bars
- Navigation through tree-structured collection of documents (a virtual filesystem or VFS)
  - Each file in the VFS supports change tracking, revision control, and update notification
  - The contents of the VFS can also be searched using a performant full-text search engine
    (TODO: is this correct? I think this is the purpose of uberfire-metadata)

To be clear, an application built with UberFire does not have to use
all of the features listed above. If your app needs toolbars and a
version-tracking VFS, but not a drag-and-drop layout or nested menus,
UberFire may still be a good choice.

ALSO MENTION: js native plugins
ALSO MENTION: CDI everywhere


UberFire Core Concepts
~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the core `uberfire-api` module,
footnote:[A few of these concepts actually come from Errai and GWT,
but the distinction isn't important when getting started with
UberFire.] so they permeate all parts of the UberFire framework:

- Perspectives
- Screens
- Widgets
- Places and PlaceRequests
- Contexts
- Panels
- Parts
- Widgets
- Menus: items, groups, factories, commands, positions
- Tool bars: items, icons, types
- Resources
- File Navigators
- Identity
- Marshalling


UberFire Backend API Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-backend-api` module, which
TODO: characterize this module; it's (mostly) not just for the server-side.

- Deployment
- Organizational Unit
- Repository
- Configuration (server-side only): ConfigGroup, ConfigItem, ConfigurationFactory
- VFS (Virtual Filesystem)


UberFire Client API Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-client-api` package,
which defines an API that's only accessible to client-side
(in-browser) code.

- Default Position
- Perspective
- Workbench things: Context, Context ID, Editor, Menu, Title, TitleDecoration, View, Popup, Screen, Tool Bar
- `UberView`, a way of injecting MVP presenters into views
- `UberFirePreferences`, a public global map
- Resource types: Any, Client, and Dot
- Client Type Registry


UberFire Commons Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-commons` package,
which contains a mix of server-only definitions shared client/server definitions.

- Clustering (server-only, see also UberFire I/O)
- Pair, a generic 2-tuple (client + server)
- Lock Service (server-only)
- Cluster Messaging (server-only, for clustered deployments; distinct from Errai Bus messages)
  - AsyncCallback, MessageHandler, MessageHandlerResolver, MessageService, MessageType
- CDI Startup Beans (the @Startup annotation) (server-only)
- PortablePreconditions (client + server), a collection of static methods for checking common preconditions (reference not null, list not empty, etc.)
  - Note: Errai has a shared class called Assert which serves a similar purpose
- Preconditions (server-only), precondition checks that are not GWT-translatable


UberFire I/O Concepts
~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-io` package,
which contains mostly server-only code.

- Dublin Core (TM) metadata
- FileSystemType (client + server)
- Clustering (see also UberFire Commons)
- IO Services (Clustered service, Search Service, Watch Service)


UberFire JS Concepts
~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-js` package, which
exposes a JavaScript API for some aspects of the UberFire framework.
This gives application developers the option to write UberFire
applications partly or entirely in JavaScript.

- JavaScript native plugin, with types representing
  - Entry points
  - Perspectives
  - Plugins
  - Workbench perspective activities
  - Workbench screen activities
  - Panel definitions
  - Part definitions


UberFire Metadata Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-metadata` package,
which appears to be a full-text search and indexing feature (TODO: is this correct?)

The UberFire Metadata module includes an API submodule which defines
the following concepts, and one implementation of the API (a "metadata
backend") that relies on Apache Lucene:

- Metadata index engine
- Metamodel store
- "K" objects:
  - KObject
  - KObjectKey
  - KObjectSimpleKey
  - KProperty
  - KPropertyBag
- MetaObject
- MetaProperty
- MetaType
- Cluster segment
- Date range
- Search index

There is also a small submodule called `uberfire-metadata-commons-io`
which introduces the following concepts:

- Batch index
- IO Search index


UberFire NIO2 Concepts
~~~~~~~~~~~~~~~~~~~~~~

The `uberfire-nio2-backport` module includes a backport of the Java SE
7 "new new IO" APIs to Java SE 6. The backport is repackaged under the
org.uberfire.java.nio.* namespace. It also provides a couple of utility
classes in the `org.apache.commons.io` package.

The UberFire NIO2 API is only intended for use on the server side.

UberFire includes NIO2 FileSystem implementations for the plain
filesystem, for git repositories (via jgit), and for the Eclipse
virtual filesystem.


UberFire Security Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-security-api` package,
and they are all available to both client- and server-side code.

- Security interceptor annotations (for types and methods)
  - `@All`
  - `@Authorized`
  - `@Deny`
  - `@Roles({})`
- Authenticated Storage
- Authentication Manager
- Authentication Provider
- Authentication Result
- Authentication Scheme
- Authentication Source
- Authentication Status
- Credential
- Principal
- Role
- Subject Properties
- Authorization Manager
- Decision Managers:
  - Resource Decision Manager
  - Role Decision Manager
- Roles Resource
- Runtime Resource
- Voting Strategy
- Crypt Provider
- Identity
- Resource
- Resource Manager
- Security Context
- Security Manager
- Subject

There is an `uberfire-security-client` module, but it's just
"plumbing:" it doesn't expose any concepts that are used directly in
application code.

These concepts are expressed in the `uberfire-security-server`
package, which contains a variety of server-side implementations of
the UberFire Security API types:

- Authentication Managers: HTTP (servlets)
- Authentication Schemes: Form, HttpBasic, JACC, "Remember Me" Cookie
- Authenticated Storage: Cookie Storage, Http Session Storage
- Authentication Providers: Default, "Remember Me" Cookie
- Authentication Sources: Database (JDBC), JACC, users.properties file
- Security Interceptors: Role-based, Trait-based
- Crypt Providers: Default
- Security Contexts: HTTP (servlets)
- Security Managers: HTTP (servlets)
- Voting Strategies: Affirmative, Consensus, Unanimous

Plus some new concepts:

- URL Resource
- Ant Paths


UberFire Server Concepts
~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-server` package,
which contains some server-side functionality.

- UberFire Image Servlet
  - UberFire Image Paths
- UberFire Servlet
  - App template, header template, footer template, user data template
