UberFire Overview
=================

This document is a survey of the features and capabilities of the
UberFire Rich Client Platform. If you are a software developer who's
new to UberFire and you're wondering what it's all about, then you've
come to the right place. If you're wondering whether UberFire is a fit
for your new (or existing) web application, this is also the right
place to start.

What is UberFire?
-----------------

UberFire is a rich client platform that helps you build web
applications. Both the client-side and server-side code are written in
Java; the server-side code is deployed as a Java EE `.war` file, and
the client-side code is deployed as precompiled JavaScript. No
Java-to-JavaScript translation occurs at runtime.

UberFire itself is built upon a general-purpose web framework called
Errai. Errai's design helps you maximize the amount of code shared
between the client and the server, leans toward a declarative (rather
than procedural) style, and strives to help you take advantage of the
type safety inherent to Java programs. Programs written in UberFire
can use Errai features directly.

Errai, in turn, is built on top of the Google Web Toolkit (GWT), which
provides a subset of the Java SE library, a large standard library of
user interface widgets, and most importantly, a highly optimized
Java-to-JavaScript compiler. There is also a huge collection of
third-party free and proprietary add-on libraries for GWT. UberFire
applications can take advantage of most of these.

The overarching programming model in UberFire is CDI, the standard
Dependency Injection and loosely-coupled eventing API that permeates
Java EE 6 and newer. The CDI programming model is present throughout 

UberFire makes it easy to include any or all of the following elements
in your application:

* User identity (login/logout) and authorization (access roles and permissions)
* A modular, user-configurable user interface (the user can rearrange designated portions of the UI by drag-and-drop)
** The framework can remember an arbitrary number of such arrangements (each is called a Perspective)
    and the user can switch between them
** The framework can limit visibility of UI elements (say, toolbar buttons and menu items)
    based on security authorization
* Nestable drop-down menus
* Tool bars
* Navigation through tree-structured collection of documents (a virtual filesystem or VFS)
** Each file in the VFS supports change tracking, revision control, and update notification
** File types can be associated with custom viewers and editors
** The contents of the VFS can also be searched using a performant full-text search engine
* Application components can be written in Java or JavaScript. Components can interoperate
  regardless of which language they are implemented in.

To be clear, an application built with UberFire does not have to use
all of the features listed above. If your application needs toolbars and a
version-tracking VFS, but not a drag-and-drop layout or nested menus,
UberFire may still be a good choice.


UberFire Core Concepts
~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the core `uberfire-api` module,
footnote:[A few of these concepts actually come from Errai and GWT,
but the distinction isn't important when getting started with
UberFire.] so they permeate all parts of the UberFire framework:

* Workbench
+
Top level container for toolbars, menu bars and perspectives.
* Perspectives
+
Child of the Workbench. Group and layout panels in a composite container.
* Panels
+
Child of a perspective and a container for Parts. Different types of panel can have different behaviours, for example (as provided by default):

** Single (active) part rendered, selection of other parts using tabs. Supports drag and drop repositioning of parts.
** Single (active) part rendered, selection of other parts from a drop-down listbox. Supports drag and drop repositioning of parts.
** Single part; fixed content. Drag and drop support disabled.
* Parts
+
Child of a Panel. A Part is the finest grained logical entity within the Workbench. A Part is represented by a Place and can be a Screen or an Editor.
* Place
+
Everything within the Uberfire framework is considered to be a Place; and can be launched programmatically. All places should have a unique identifier within the Workbench.
* PlaceRequest
+
A request for the Workbench to go to a Place. PlaceRequests can represent a perspective, pop-up, screen or editor.
* Path
+
A Path is a location within any Virtual File System configured within UberFire. Editors can be defined to respond to different Paths.
* ObservablePath
+
An ObservablePath is an extension of a Path that provides a mechanism to listen to Path's changes, the list of possible changes are Rename, Delete, Update or Copy.
* Screens
+
A screen is not associated to a Path pattern and can be launched by requesting the corresponding Place. Screens can be used for static content; or for resources beyond UberFire's VFS mechanisms. 
* Editors
+
An editor is associated to a Path pattern. Requests for Places that correspond to a Path will launch corresponding editor. Editors can be used for resources within UberFire's VFS mechanisms.
* Splash Screens
+
A splash screen is an informative screen that can be displayed when any Place is displayed (due an interception process). A splash screen may have multiple interception points.
* Contexts
+
A context can be any widget and the most common use case is to provide context navigation. An example of context navigation is an Editor that uses context to provide a
file browser pointing to current file directory. Although context navigation is the most common usage, Context can be used to other purposes like display Part's metadata
or even a chat widget.
* Menus
+
UberFire Menus aims to provide a common abstraction to define general purpose menus.

** Menu Item
+
Top level abstraction that provides common menu item metadata like a caption, state (enabled or disabled), position (left, right, center) and order.
** Menu Group
+
An specialized Menu Item that groups other menu items.
** Menu Custom
+
An specialized Menu Item that users can provide it's own custom menu item. Most flexible, but non portable, way to define a menu item user interface.
* Tool bars
+
Common abstraction to define a Tool bar. Due the graphic interface nature of a Tool bar, tool bar items are not only associated with an action but also with an icon.
* Principal
+
A principal is just a security term for an identifying attribute, such as a username or user id or social security number or anything else that can be considered an 'identifying' attribute for a Subject.
* Role
+
A Roles represents a permission. An Identity may have multiple roles.
* Subject & Identity
+
Subject or Identity is any entity that represents the authenticated user (that can be a user account, a computer account, or a thread or process). Although the term Subject is common for
most security related frameworks, we believe that this word is a bit vague and due this reason in UberFire the term Identity is used instead of Subject.
* SessionInfo
+
SessionInfo is the abstraction that aims to represent an unique pair of Identity and session id. Differently from traditional Java web applications where sessions are browser based, UberFire session id's
are unique on browser tab level. This is the type that is used by ObservablePath to identify external changes.
* Resources
+
Resource is a marker interface used for access restriction purposes (security).
* Types
** ResourceTypeDefinition
+
A portable model which represents a resource type (resource in this context means a type of a Path and it's not related to security resource).
* NotificationEvent
+
Signal a informative notification (e.g. "File saved" etc) that appears within the Workbench as a popup message. Raised by whoever needs to inform users of a notification. There are four types of notifications: DEFAULT, ERROR, SUCCESS, INFO and WARNING.
* VFS Events
** ResourceAddedEvent
+
Signal a resource has been added to a VFS. Raised by VFS.
** ResourceBatchChangesEvent
+
Signal a batch change to various resources within a VFS. Raised by VFS.
** ResourceCopiedEvent
+
Signal a resource has been copied within a VFS. Raised by VFS.
** ResourceDeletedEvent
+
Signal a resource has been deleted from a VFS. Raised by VFS.
** ResourceOpenedEvent
+
Signal a resource has been opened (Note: Uberfire does not make raise or observe the event itself) 
** ResourceRenamedEvent
+
Signal a resource has been renamed within a VFS. Raised by VFS.
** ResourceUpdatedEvent
+
Signal a resource has been modified within a VFS. Raised by VFS.

* Widgets
+
UberFire is not a widget library and can be used with different third party libraries;
however some widgets are provided for core Workbench features.

UberFire Backend API Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-backend-api` module,
which defines mostly common services that are used by client side,
but implemented in the server side.

* Runtime Plugins
* VFS (Virtual File System)

TODO

UberFire Client API Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-client-api` package,
which defines an API that's only accessible to client-side
(in-browser) code.

* Annotations
** Perspective
+
Marker annotation to allow a `@WorkbenchPerspective` to declare a method that returns a PerspectiveDefinition object, defining the workbench perspective.
** WorkbenchEditor
+
A marker annotation to declare a class as being a Workbench Editor. Editors relate to specific resources within the framework, defined by their ResourceTypeDefinition.
** WorkbenchPartTitle
+
A marker annotation to declare a method within a `@WorkbenchEditor` or `@WorkbenchScreen` that returns a String defining the title for the component.
** WorkbenchPartTitleDecoration
+
A marker annotation to declare a method within a `@WorkbenchEditor` or `@WorkbenchScreen` that returns an IsWidget object to be used as a decoration, beside the @WorkbenchPartTitle.
** WorkbenchPartView
+
A marker annotation to declare a method within a `@WorkbenchEditor` or `@WorkbenchScreen` that returns a IsWidget object representing the view (or user-interface) of the component.
** WorkbenchPerspective
+
Marker annotation to declare a class as providing a perspective definition. The definition itself is returned from a method within the `@WorkbenchPerspective` annotated with @Perspective. 
** WorkbenchPopup
+
Marker annotation to declare a class as being a popup that can be displayed by the framework.
** WorkbenchScreen
+
A marker annotation to declare a class as being a Workbench Screen. Screens would usually display static content, or at least content that is not dependent upon a Path within the underlying VFS. The screen could still consume external resources (e.g. query a database) however it does not integrate with the framework's use of Paths.
** DefaultPosition
+
Marker annotation to allow either `@WorkbenchEditor` 's or `@WorkbenchScreen` 's to declare a method that returns the default location of the component in a perspective when opened by the framework. NOTE: This is specific to the NSEW perspective type. Work is in progress to provide support for additional types of perspective.
** WorkbenchMenu
+
A marker annotation to declare a method within a `@WorkbenchPerspective`, `@WorkbenchEditor` or `@WorkbenchScreen` that returns a Menus object defining a menu to be shown by the framework when the perspective, editor or screen is displayed.
** WorkbenchToolbar
+
A marker annotation to declare a method within a `@WorkbenchPerspective`, `@WorkbenchEditor` or `@WorkbenchScreen` that returns a ToolBar object defining a toolbar to be shown by the framework when the perspective, editor or screen is displayed.
** WorkbenchContext
+
A marker annotation to declare a class as being a Workbench context widget.
** WorkbenchContextId
+
A marker annotation to declare a method within a `@WorkbenchEditor` or `@WorkbenchScreen` that returns a reference to a WorkbenchContext identifier.
** WorkbenchSplashScreen
+
Marker annotation to declare a class as providing a Splash Screen definition. --->The definition itself is returned from a method within the `@WorkbenchPerspective` annotated with @Perspective.
** Intercept
+
A marker annotation to declare a method within a `@WorkbenchSplashScreen` that returns a boolean that has it's own decision to intercept or not a Place.
** SplashBodyHeight
+
In order to have a proper render, a splash screen needs to provide the height of it's body.
** SplashFilter
+
A marker annotation to declare a method within a `@WorkbenchSplashScreen` that returns a SplashScreenFilter used to check if a Place should be intercepted ot not.

* Interfaces
** UberView
+
A convenience interface to support linking a View to it's Presenter as required by implementations of the MVP pattern. Uberfire itself does not impose use of MVP.

* Events
** ChangeTitleWidgetEvent
+
A CDI event that provides support for `@WorkbenchEditor` 's and @Workbench screens to inform the framework that their title or decoration should be updated.
** NewSplashScreenActiveEvent
+
Signal when one or more splash screens is available in the current navigation (during an interception of a Perspective or a Part).
* Types
** ClientResourceType
+
Extends ResourceTypeDefinition with client-side specific information like icon representation; allowing `@WorkbenchEditor` 's to specify the types of resource they are capable of handling.

* UberFire Preferences
+
Utility class that holds general preferences that have impact in UberFire client behavior. Those preferences should be setted by application EntryPoint, in order to be sure that
it will take place before Workbench starts up. Here are the existing preferences that can be set:

** org.uberfire.client.workbench.clone.ou.mandatory.disable: disable the mandatory OU field of new repositories.
** org.uberfire.client.workbench.widgets.listbar.context.disable: disables `Context` behavior.
** org.uberfire.client.workbench.path.automatic.close.onDelete: disables the automatic close of an `Editor` if the file is deleted.

UberFire Commons Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-commons` package,
which contains a mix of server-only definitions shared client/server definitions.

* Clustering (server-only, see also UberFire I/O)
* Data
 ** Pair, a generic 2-tuple (client + server)
 ** Triple, a generic 3-tuple (client + server)
 ** Cacheable, interface that provides explicit visibility of cached data.
* Lock Service (server-only)
* Messaging (server-only, distinct from Errai Bus messages)
+
Provide for clustered deployments;
** AsyncCallback
+
TODO
** MessageHandler
+
TODO
** MessageHandlerResolver
+
TODO
** MessageService
+
TODO
** MessageType
+
TODO

* CDI Startup Beans (the @Startup annotation) (server-only)
* PortablePreconditions (client + server), a collection of static methods for checking common preconditions (reference not null, list not empty, etc.)
** Note: Errai has a shared class called Assert which serves a similar purpose
* Preconditions (server-only), precondition checks that are not GWT-translatable

UberFire I/O Concepts
~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-io` package,
which contains mostly server-only code.

* Dublin Core (TM) metadata
* FileSystemType (client + server)
* Clustering (see also UberFire Commons)
* IO Services (Clustered service, Search Service, Watch Service)
+
TODO

UberFire JS Concepts
~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `UberFire-js` package, which
exposes a JavaScript API for some aspects of the UberFire framework.
This gives application developers the option to write UberFire
applications partly or entirely in JavaScript.

* JavaScript native plugin, with types representing
** Entry points
** Perspectives
** Plugins
** Workbench perspective activities
** Workbench screen activities
** Panel definitions
** Part definitions

TODO

UberFire Metadata Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-metadata` package,
which is a flexible metadata framework that index and search content.

The UberFire Metadata module includes an API submodule which defines
the following concepts, and one implementation of the API (a "metadata
backend") that relies on Apache Lucene:

TODO

* Metadata index engine
* Metamodel store
* "K" objects:
** KObject
** KObjectKey
** KObjectSimpleKey
** KProperty
** KPropertyBag
* MetaObject
* MetaProperty
* MetaType
* Cluster segment
* Date range
* Search index

There is also a small submodule called `uberfire-metadata-commons-io`
which introduces the following concepts:

* Batch index
* IO Service Provider
** Index
** Search

UberFire NIO2 Concepts
~~~~~~~~~~~~~~~~~~~~~~

The `uberfire-nio2-backport` module includes a backport of the Java SE
7 "new new IO" APIs to Java SE 6. The backport is repackaged under the
org.uberfire.java.nio.* namespace. It also provides a couple of utility
classes in the `org.apache.commons.io` package.

The UberFire NIO2 API is only intended for use on the server side.

UberFire includes NIO2 FileSystem implementations for the plain
filesystem, for git repositories (via jgit), and for the Eclipse
virtual filesystem.


UberFire Server Concepts
~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-server` package,
which contains some server-side functionality.

* UberFire Servlet
** App template, header template, footer template, user data template
* FileUpload Servlet
* FileDownload Servlet
TODO

UberFire Widgets Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~

UberFire is not a widget library but does include a number of useful widgets 
for that can be re-used.

UberFire Widgets are packaged into modules:
`uberfire-widgets-commons`, `uberfire-widgets-core-client`,
`uberfire-widgets-properties-editor` and `uberfire-widget-markdown`.

The `uberfire-widgets-commons` module introduces the following concepts:

* Animations
** Fade in animation
+
Simple linear animation to fade a Widgets transaparency from 100% to 0%.
** Fade out animation
+
Simple linear animation to fade a Widgets transaparency from 0% to 100%.
** Sequenced Animations
+
An extension of GWT's Animation allowing animations to be sequenced one after another.
** Sequencer
+
A utility class to place numerous SequencedAnimations into a List and run the whole as a single animation.

* Popups
** ErrorPopup
+
A generic popup to show an error message.
** ConcurrentChangePopup
+
A popup allowing the user to take different actions when a concurrent modification to a Path has been detected by the framework.
** ModalFooterOKButton
+
Popup footer showing an "OK" button. Action for button is a Command.
** Busy popup
+
A popup that can be used to show a message when a log running task is being executed.
** ModalFooterOKCancelButtons
+
Popup footer showing "OK" and "Cancel" buttons. Actions for buttons are Commands.
** ModalFooterYesNoCancelButtons
+
Popup footer showing "Yes", "No" and "Cancel" buttons. Actions for buttons are Commands.

* MultiPageEditor
+
UberFire's implementation of a TabBar that allows the tab section to be located in different positions.

** Page
+
A page that can be added to the MultiPageEditor.

* Miscellaneous
+
There are a number of miscellaneous widgets that largely exist in UberFire to demonstrate a "show case" web application.
Furthermore a large number of them exist solely because UberFire eminated from a need to develop a Workbench for
Drools Guvnor 6.0.x. Historically a lot of existing Drools Guvnor widgets were moved into `uberfire-widgets-commons`
however should be considered deprecated.
 
** Lazy stack panel and the LoadContentCommand
** Restricted entry text box
** Clickable label
** Context dropdown button
** Decorated disclosure panel
** Dirtyable: widgets, composites, containers, horizontal panes, vertical panes, and FlexTables
** Editor widget
** Form style layout
** Form style popup
** Pretty form layout
** Image button
** Info cube
** Info popup
** Numeric text boxes (for each Java numeric type from byte to BigDecimal)
** Popups
** Resizable textarea
** Small label
** UberBreadcrumbs
** Common resources: images, alted images, css, general resources
** Simple and paged tables: cells, columns, titled cells; sortable headers, sort direction
** Comparable image resources
** A collection of built-in images (gif & png) for corners, pager buttons, dialog status icons, and more (see also uberfire-widgets-core-client)

The `uberfire-widgets-core-client` module introduces the following concepts:

* Components implemented as MVP:
** DefaultFileEditor
+
A `@WorkbenchEditor` that provides the ability to upload and download any file not explicitly handled by another `@WorkbenchEditor`'s ResourceType.
** TextEditor
+
A `@WorkbenchEditor` that provides the ability to edit text files (*.txt) or "dot" files (file names prefixed with a ".", otherwise known as "Meta data" files) in a TextArea.
** FileExplorer
+
A `@WorkbenchScreen` that provides a simple Tree based explorer of an underlying VFS. Clicking a file launches the corresponding `@WorkbenchEditor`.
The FileExplorer also registers a menu with the UberFire framework that gives users access to the RepositoriesEditor and ability to clone or create new Repositories.
** FileNavigator
+
A `@WorkbenchScreen` that provides more sophisticated navigation of an underlying VFS. 
** MetaFileEditor
+
A `@WorkbenchEditor` that provides the ability to edit "Meta data" files (file names prefixed with a ".") in a TextArea. "Meta data" files are also called "dot" files.
** RepositoriesEditor
+
A `@WorkbenchScreen` that provides the ability to view Repositories configured within the underlying VFS.
** RepositoryEditor
+
A `@WorkbenchScreen` that shows details of a Repository configured within the underlying VFS.
** IFrameScreen
+
A simple `@WorkbenchScreen` that supports showing content from a URL within an IFRAME.
** Wizard framework
+
A simple framework to support the implementation of "Wizard" type dialogs, where content is completed over a series of pages.

The `uberfire-widget-markdown` module introduces the following concepts:

* Markdown
+
An example `@WorkbenchScreen` that demonstrates a "live" editor for the Markdown text formatting syntax (http://en.wikipedia.org/wiki/Markdown).
The editor is sub-divided into two region; one allows entry of text markdown and the other shows a "live" (i.e. updated in real-time) preview of the rendered mark-down.

The `uberfire-widgets-properties-editor` module introduces the following concepts:

* Properties Editor
+
TODO
* PropertyEditorCategory
+
TODO
* PropertyEditorFieldInfo
+
TODO
* PropertyEditorEvent
+
TODO
* PropertyEditorType
+
TODO
* PropertyEditorChangeEvent
+
TODO
* BeanPropertyEditorBuilderService
+
TODO

UberFire Workbench Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-workbench` package,
which provides annotation processors for the core annotations in
`uberfire-client-api`. 

UberFire supports re-use or authoring of any widgets however promotes use of the MVP (Model, View, Presenter) design 
pattern. Both `@WorkbenchScreen` 's and `@WorkbenchEditor` 's need only declare a minimal number of "hooks" to UberFire. 
Legacy widgets too can be simply wrapped to work within UberFire.  

* The Workbench physical hierarchy (top to bottom): 
** User application
** UberFire Workbench
** UberFire `@WorkbenchPerspective`
** UbefFire `@WorkbenchScreen` or `@WorkbenchEditor`

* The Workbench logical hierachy (top to bottom):
** User application
** Workbench
** Perspective
** Panel
** Part

* The Workbench logical-to-physical mapping (top to bottom):
** Perspective -> `@WorkbenchPerspective`
** Part -> `@WorkbenchScreen` or `@WorkbenchEditor`

* The Workbench relationships:
** Workbench -> [1..n] -> Perspective -> [1..n] -> Panel -> [1..n] -> Part

* Annotation processors for:
** `@WorkbenchPerspective`
** `@WorkbenchContext`
** `@WorkbenchEditor`
** `@WorkbenchScreen`
** `@WorkbenchPopup`

* GWT Bootstrap and UberFireConfigurator
** FontAwesome resources

* The UberFire MVP framework
** Places
+
Every `@WorkbenchPerspective`, `@WorkbenchScreen`, `@WorkbenchEditor` and `@WorkbenchPopup` is represented 
by a `Place`. In order to display a `Place` developers need tell UberFire to "goto" a `Place`. UberFire
provides a `PlaceManager` that can be injected into your own code and used to programmatically navigate 
to any `Place` you require.

*** Place Requests
+
A request for UberFire to navigate to a place.

**** DefaultPlaceRequest
+
A request to navigate to a `@WorkbenchPerspective`, `@WorkbenchScreen` or a `@WorkbenchPopup`. These do not require 
knowledge of the `Path` they represent as the logical identifier of the foregoing physical entity is used to
lookup a corresponding entity.

**** PathPlaceRequest
+
A request to navigate to a `@WorkbenchEditor` that is registered to handle the specified Path.

** Activities
+
Internally every class annotated with either `@WorkbenchPerspective`, `@WorkbenchScreen`, `@WorkbenchEditor` or `@WorkbenchPopup`
has a corresponding wrapper class generated by UberFire's annotation processor. These classes are called `Activities`. Every
`Activity` is a subclass of an internal UberFire classes that plugs into UberFire's life-cycle management.
+
Consquentially every `@WorkbenchPerspective`, `@WorkbenchScreen`, `@WorkbenchEditor` or `@WorkbenchPopup` can register
"hooks" for UberFire to invoke corresponding to it's life-cycle.

*** `@WorkbenchPerspective` lifecycles
**** `@OnStartup`
+
Executed when a request to "go to" a component is received, but prior to it being displayed by the framework.
This gives the component an opportunity to perform any initialization work.
**** `@OnOpen`
+
Executed when the component is displayed.
**** `@OnClose`
+
Executed when the component is being hidden, i.e. before "going to" another Perspective.
**** `@OnShutdown`
+
Executed after the component is closed, giving it an opportunity to release resources or perform any tidy-up operations.

*** `@WorkbenchScreen` lifecycles
**** `@OnStartup`
+
Executed when a request to "go to" a component is received, but prior to it being displayed by the framework.
This gives the component an opportunity to perform any initialization work.
**** `@OnOpen`
+
Executed when the component is displayed.
**** `@OnFocus`
+
Executed when an existing "open" component receives the focus from either the user or when the `Part` has been displayed.
**** `@OnLostFocus`
+
Executed when an existing "open" component looses the focus by another `Part` receiving the focus.
**** `@OnMayClose`
+
Executed prior to the `Part` being closed by the framework. This gives the component an opportunity to veto closure, 
for example should it contain data that may need persisting. The default is for the framework to close the `Part` automatically.
**** `@OnClose`
+
Executed when the component is being closed normally in response to the user clicking the "close" icon for the `Part`.
**** `@OnShutdown`
+
Executed after the component is closed, giving it an opportunity to release resources or perform any tidy-up operations.

*** `@WorkbenchEditor` lifecycles
**** `@OnStartup`
+
Executed when a request to "go to" a component is received, but prior to it being displayed by the framework.
This gives the component an opportunity to perform any initialization work.
**** `@OnOpen`
+
Executed when the component is displayed.
**** `@OnFocus`
+
Executed when an existing "open" component receives the focus from either the user or when the `Part` has been displayed.
**** `@OnLostFocus`
+
Executed when an existing "open" component looses the focus by another `Part` receiving the focus.
**** `@IsDirty`
+
Used to check if the current editor has a dirty state (some data has changed) or not. Usually this method is used by `@OnMayClose`.
**** `@OnSave`
+
Executed when a `SavePlaceEvent` is raised corresponding to the `Part`.
**** `@OnMayClose`
+
Executed prior to the `Part` being closed by the framework. This gives the component an opportunity to veto closure, 
for example should it contain data that may need persisting. The default is for the framework to close the `Part` automatically.
**** `@OnClose`
+
Executed when the component is being closed normally in response to the user clicking the "close" icon for the `Part`.
**** `@OnShutdown`
+
Executed after the component is closed, giving it an opportunity to release resources or perform any tidy-up operations.

*** `@WorkbenchPopup` lifecycles
**** `@OnStartup`
+
Executed when a request to "go to" a component is received, but prior to it being displayed by the framework.
This gives the component an opportunity to perform any initialization work.
**** `@OnOpen`
+
Executed when the component is displayed.
**** `@OnMayClose`
**** `@OnClose`
+
Executed when the component is being closed normally in response to the user clicking the "close" icon for the `Part`.
**** `@OnShutdown`
+
Executed after the component is closed, giving it an opportunity to release resources or perform any tidy-up operations.

*** `@WorkbenchContext` lifecycles
**** `@OnContextAttach`
+
Executed when the `Context` is attached to it's `Part` in a Panel.

** Panels and Layouts
+
UberFire ships with a single "Window Manager" that is responsible for the layout and operation of the `Workbench`.
The default implementation has the concept of `Panel` 's laid out according to the points of a compass; i.e.
North, South, East and West. The "Window Manager" also supports re-positioning of `Part` 's by dragging them
to new locations.
+
`Panel` 's can be of different types: 

*** Multi Tab Workbench Panels
+
Panel that supports multiple `Part` 's displayed using a Tab widget. Selection of other parts using tabs. Supports drag and drop repositioning of parts.
*** Multi List Workbench Panels
+
Panel  that supports multiple `Part` 's displayed in custom widget that display `Part` 's context menus. Selection of other parts from a drop-down listbox. Supports drag and drop repositioning of parts.
*** Simple Workbench Panels
+
Panel that supports a single `Part` displayed in a custom widget that display `Part` 's context menus. Drag and drop disabled by default, but can be activated.
*** Static Workbench Panels
+
Simplest possible panel that supports a single `Part`. No drag and drop support.

** Headers
+
`Header` 's represent horizontal sections of the Workbench that can contain arbritrary content.
They are included automatically above the Workbench user-space ordered according to their definition.
For example a `Header` could be defined to hold a top-level Menu defintion and another `Header`
could be defined to hold a top-level Toolbar definition.

** Footers
+
`Footer` 's represent horizontal sections of the Workbench that can contain arbritrary content.
They are included automatically under the Workbench user-space ordered according to their definition.
For example a `Footer` could be defined to hold a copyright information.

** The Workbench Menu Bar
+
UberFire supports context sensitive Menus. Menus can be defined at different levels:

*** Workbench
+
Developers can place a `WorkbenchMenuBarPresenter` into a `Header` to provide a top-level Menu for the whole Workbench. 
*** `@WorkbenchPerspective`
+
Perspectives can annotate a method with `@WorkbenchMenu` to declare a method that returns a `Menu` definition. 
UberFire will show the menu definition automatically whenever the Perspective is displayed.
*** `@WorkbenchScreen` or `@WorkbenchEditor`
+
Static screens and Editors can annotate a method with `@WorkbenchMenu` to declare a method that returns a `Menu` definition. 
UberFire will show the menu definition automatically whenever the screen receives the focus.

** The Workbench Tool Bar
+
UberFire supports context sensitive Toolbars. Toolbars can be defined at different levels:

*** Workbench
+
Developers can place a `WorkbenchToolBarPresenter` into a `Header` to provide a top-level Toolbar for the whole Workbench. 
*** `@WorkbenchPerspective`
+
Perspectives can annotate a method with `@WorkbenchToolbar` to declare a method that returns a `ToolBar` definition. 
UberFire will show the toolbar definition automatically whenever the Perspective is displayed.
*** `@WorkbenchScreen` or `@WorkbenchEditor`
+
Static screens and Editors can annotate a method with `@WorkbenchToolbar` to declare a method that returns a `ToolBar` definition. 
UberFire will show the toolbar definition automatically whenever the screen receives the focus.

* Workbench Events
** ApplicationReadyEvent
+
Signal when certain resources have been injected into the GWT Host Page and other bootstrap processes complete. Raised by UberFire.
** BeforeClosePlaceEvent
+
Signal when a Part is about to be closed; normally in response to the user electing to interactively close a Part. Screens and Editors can veto the closure (for example if they contain unsaved content). Raised by Uberfire.
** ClosePlaceEvent
+
Signal when a Part is closed. This event signals the removal of a Part from a Panel. Raised by Uberfire.
** DropPlaceEvent
+
Part of the drag and drop support. Signals a Part has been dragged to and dropped on a target Panel. Raised by Uberfire.
** MaximizePlaceEvent
+
Signals a Part has been "maximized" to consume the whole Workbench client region (Note: Work in progress). Raised by Uberfire.
** MinimizePlaceEvent
+
Signals a Part has been "minimized" to a status bar within the Workbench (Note: Work in progress). Raised by Uberfire.
** NewPerspectiveEvent
+
Signal that a new `Perspective` was registered during runtime. Raised by Uberfire (related to `uberfire-js` module).
** NewWorkbenchScreenEvent
+
Signal that a new `Screen` was registered during runtime. Raised by Uberfire (related to `uberfire-js` module).
** PanelFocusEvent
+
Signal a Panel has received the input focus. Raised by Uberfire.
** PerspectiveChange
+
Signal a change in active Perspective. Raised by Uberfire.
** PlaceGainFocusEvent
+
Signal a Place has gained the input focus. Raised by Uberfire.
** PlaceLostFocusEvent
+
Signal a Place has lost the input focus. Raised by Uberfire.
** SavePlaceEvent
+
Signal an Editor can have it's state saved. Raised by developers using Uberfire from Widgets outside of the Editor itself (e.g. a Workbench Menubar entry).
** SelectPlaceEvent
+
Signal a Place has been selected. Raised by Uberfire.
** RestorePlaceEvent
+
Signal a Place has been restored from "minimized" state (Note: Work in progress). Raised by Uberfire.


UberFire Security Concepts
~~~~~~~~~~~~~~~~~~~~~~~~~~

These concepts are expressed in the `uberfire-security-api` package,
and they are all available to both client- and server-side code.

* Security interceptor annotations (for types and methods)
** `@All`
** `@Authorized`
** `@Deny`
** `@Roles({})`
* Authenticated Storage
* Authentication Manager
* Authentication Provider
* Authentication Result
* Authentication Scheme
* Authentication Source
* Authentication Status
* Credential
* Principal
* Role
* Subject Properties
* Authorization Manager
* Decision Managers:
** Resource Decision Manager
** Role Decision Manager
* Roles Resource
* Runtime Resource
* Voting Strategy
* Crypt Provider
* Identity
* Resource
* Resource Manager
* Security Context
* Security Manager
* Subject

There is an `uberfire-security-client` module, but it's just
"plumbing:" it doesn't expose any concepts that are used directly in
application code.

These concepts are expressed in the `uberfire-security-server`
package, which contains a variety of server-side implementations of
the UberFire Security API types:

* Authentication Managers: HTTP (servlets)
* Authentication Schemes: Form, HttpBasic, JACC, "Remember Me" Cookie
* Authenticated Storage: Cookie Storage, Http Session Storage
* Authentication Providers: Default, "Remember Me" Cookie
* Authentication Sources: Database (JDBC), JACC, users.properties file
* Security Interceptors: Role-based, Trait-based
* Crypt Providers: Default
* Security Contexts: HTTP (servlets)
* Security Managers: HTTP (servlets)
* Voting Strategies: Affirmative, Consensus, Unanimous

Plus some new concepts:

* URL Resource
* Ant Paths
