= UberFire Overview
UberFire Community <uberfire@googlegroups.com>
:toc:
:source-highlighter: highlightjs
:stylesheet: asciidoctor.css
:link-suffix: .asciidoc

This document is a survey of the features and capabilities of the
UberFire Rich Client Platform. If you are an engineering manager or
software developer who's heard of UberFire and you're wondering what
it's all about, then you've come to the right place. If you're
wondering whether UberFire is a fit for your new (or existing) web
application, this is also the right place to start.

For context, it may help to start by checking out a live demo of an
UberFire application. For that, see the
link:quick-start{link-suffix}[Quick Start Guide] and then come back
here.

If you're a software developer and you already know you want to make
an app with UberFire, you can safely skip this guide and head straight
for link:tutorial{link-suffix}[the UberFire Tutorial].


== What is UberFire?

UberFire is a rich client platform that helps you build
workbench-style web applications. UberFire makes it easy to build
applications with any or all of the following elements:

* User identity (login/logout) and authorization (access roles and permissions)
* A modular, user-configurable user interface based on Panels (geometry) and Parts (content)
** The user can rearrange designated portions of the UI by drag-and-drop)
** The framework can remember an arbitrary number of such arrangements (each is called a Perspective)
    and the user can switch between them
** The framework can hide UI elements (say, toolbar buttons and menu items) based on security authorization
* Nestable drop-down menus
* Tool bars
* Navigation through tree-structured collection of documents (a virtual filesystem or VFS)
** Each file in the VFS supports change tracking, revision control, and update notification
** File types can be associated with custom viewers and editors
* Application components can be written in Java or JavaScript. Components can interoperate
  regardless of which language they are implemented in.

To be clear, an application built with UberFire does not have to use
all of the features listed above. If your application needs toolbars and a
version-tracking VFS, but not a drag-and-drop layout or nested menus,
UberFire may still be a good choice.


=== Programming Model and API

In an UberFire app, both the client-side and server-side code are
written in Java (although you have the option of writing some or all
of the client side in JavaScript; read on for details). The
application is deployed as a Java EE `.war` file, and the client-side
code is deployed as precompiled JavaScript. No Java-to-JavaScript
translation occurs at runtime.

==== Declarative API and Compile Time Modularity

UberFire provides a declarative programming model for building
flexible user interfaces. The declarative style is based on CDI beans,
qualifiers, and events, as well as some UberFire-specific annotations
for describing user interfaces. UberFire components declared in this
way are automatically scanned, discovered, and wired together at
compile time.

The declarative style tends to be easy to read and understand, but
more importantly, it allows the correctness of the application code to
be checked at compile time. This lets you find and fix bugs right
away, rather than having them hide until detected by a test, or worse
yet, by an end user when the app is in production!

==== JavaScript-based Extensions and Run Time Modularity

The drawback of compile-time module discovery is that the application
needs to be recompiled in order to add new modules. To solve this
problem, UberFire also provides an API for dynamically registering new
modules at run time. These run-time modules can be written in plain
JavaScript or in compile-to-JavaScript languages such as CoffeeScript,
TypeScript, or Dart. They can also optionally depend on third-party
JavaScript frameworks such as Angular, Ember, or Knockout.

Of course, an UberFire application can use a combination of
compile-time and run-time module registration. You are free to choose
the best tool for each aspect of your application.


=== Perspectives, Panels, and Parts

UberFire applications are made of three fundamental building blocks:
Perspectives, Panels, and Parts.

Parts are the meat of the application's user interface. File tree
explorers, status displays, textual or visual file editors, chat
windows, and help browsers are all typical examples of parts in an
UberFire application.

Panels are containers for parts, and can also contain nested
panels. Most types of panels can contain zero or more parts, generally
showing only one part at a time. The user switches between parts using
tabs, drop-down lists, or custom application-defined controls. Other
panel types allow only one part and do not provide a part switcher UI.

Perspectives are the top-level containers for workbench layouts. They
contain the root panel, which in turn may contain more nested panels,
and ultimately the parts that contain the meat of the application's
UI. Perspectives specify the default arrangement of panels and which
parts should appear in those panels by default. Each application has
at least one perspective.

Users can customize the layout of a perspective by drag and drop:
resizing, creating, and removing panels, as well as dragging parts
between panels. Each user's customizations are automatically saved to
the server and restored next time the user comes back to the same
perspective.


=== Declarative Access Control in the UI

The UI library also handles nestable dropdown menus, toolbars, and
context menus, all of which support role-based access control. Simply
declare the required roles in an annotation, and UberFire
automatically hides features that the current user does not have
permission to use.


=== Virtual Filesystem and Git Support

In addition to the workbench and security modules, UberFire offers
a virtual file system (VFS) API that's accessible from both
client-side (runs in the web browser) and server-side (runs in a Java
app server) code. The VFS has pluggable backends, and UberFire
includes both a plain filesystem backend and a Git backend. This means
you can write code that runs in the web browser that interacts with
the contents of a filesystem directory or a Git repository: exploring,
reading files, checking in changes, reviewing history, even branching
and merging.


=== Under the Hood

UberFire itself is built upon a general-purpose web framework called
Errai. Errai's design helps you maximize the amount of code shared
between the client and the server, leans toward a declarative (rather
than procedural) style, and strives to help you take advantage of the
type safety inherent in the Java language. Programs written in
UberFire can use Errai features directly.

Errai, in turn, is built on top of the Google Web Toolkit (GWT), which
provides a subset of the Java SE library, a large standard library of
user interface widgets, and most importantly, a highly optimized
Java-to-JavaScript compiler. There is also a huge collection of
third-party free and proprietary add-on libraries for GWT. UberFire
applications can take advantage of most of these.

The overarching programming model in UberFire is CDI, the standard
Dependency Injection and loosely-coupled eventing API that permeates
Java EE 6 and newer. The CDI programming model is present throughout 
UberFire's client-side, server-side, and shared APIs.


== Now What?

Now that you have an idea of how everything fits together, grab a copy
of the link:tutorial{link-suffix}[the UberFire Tutorial] app, and
start building your new app from there!
